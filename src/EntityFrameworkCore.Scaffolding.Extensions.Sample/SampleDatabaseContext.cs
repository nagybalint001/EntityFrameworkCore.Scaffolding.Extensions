//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using EntityFrameworkCore.Scaffolding.Extensions.Sample.Entities;
using Microsoft.EntityFrameworkCore;

namespace EntityFrameworkCore.Scaffolding.Extensions.Sample;

public partial class SampleDatabaseContext : DbContext
{
    public SampleDatabaseContext(DbContextOptions<SampleDatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Apple> Apple { get; set; }

    public virtual DbSet<Tree> Tree { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Apple>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pkApple");

            entity.ToTable(tb => tb.HasComment("Apple entity"));

            entity.Property(e => e.Id).HasComment("Primary key.");
            entity.Property(e => e.CreatedAt).HasComment("Creation time.");
            entity.Property(e => e.CreatedBy).HasComment("Created by.");
            entity.Property(e => e.IsDeleted).HasComment("Is deleted.");
            entity.Property(e => e.ModifiedAt).HasComment("Last modification time.");
            entity.Property(e => e.ModifiedBy).HasComment("Last modified by.");
            entity.Property(e => e.Status)
                .HasComment("Status of the apple.")
                .HasColumnType("int");
            entity.Property(e => e.TreeId).HasComment("The tree it is belonging to.");

            entity.HasOne(d => d.Tree).WithMany(p => p.Apple)
                .HasForeignKey(d => d.TreeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fkAppleToTree");
        });

        modelBuilder.Entity<Tree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("pkTree");

            entity.ToTable(tb => tb.HasComment("Tree entity"));

            entity.Property(e => e.Id).HasComment("Primary key.");
            entity.Property(e => e.CreatedAt).HasComment("Creation time.");
            entity.Property(e => e.CreatedBy).HasComment("Created by.");
            entity.Property(e => e.Description)
                .HasMaxLength(256)
                .HasComment("Description of the tree.");
            entity.Property(e => e.ModifiedAt).HasComment("Last modification time.");
            entity.Property(e => e.ModifiedBy).HasComment("Last modified by.");
            entity.Property(e => e.Name)
                .HasMaxLength(64)
                .HasComment("Name of the tree.");
            entity.Property(e => e.Type)
                .HasComment("Type of the tree.")
                .HasColumnType("int");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
